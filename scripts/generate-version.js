"use strict";

// eslint-disable-next-line @typescript-eslint/no-require-imports
const fs = require("fs");
// eslint-disable-next-line @typescript-eslint/no-require-imports
const path = require("path");

const cwd = process.cwd();
const pkgPath = path.join(cwd, "package.json");
const outPath = path.join(cwd, "src", "version.ts");
const banner = "// This file is auto-generated by scripts/generate-version.js. Do not edit manually.\n";

const bumpType = (process.argv[2] || "").toLowerCase();

if (![
  "major",
  "minor",
  "patch",
].includes(bumpType)) {
  console.error("Usage: node scripts/generate-version.js <major|minor|patch>");
  process.exit(1);
}

function parseSemver(v) {
  const core = v.split("-")[0].split("+")[0];
  const match = /^(\d+)\.(\d+)\.(\d+)$/.exec(core);
  if (!match) {
    throw new Error(`Invalid semver version in package.json: ${v}`);
  }
  return {
    major: Number(match[1]),
    minor: Number(match[2]),
    patch: Number(match[3]),
  };
}

function bump(version, type) {
  const {
    major, minor, patch,
  } = parseSemver(version);
  if (type === "major") {
    return `${major + 1}.0.0`;
  }
  if (type === "minor") {
    return `${major}.${minor + 1}.0`;
  }
  if (type === "patch") {
    return `${major}.${minor}.${patch + 1}`;
  }
  throw new Error(`Unknown bump type "${type}". Use "major", "minor" or "patch".`);
}

let pkg;
try {
  pkg = JSON.parse(fs.readFileSync(pkgPath, "utf8"));
} catch (e) {
  console.error("Failed to read package.json:", e.message);
  process.exit(1);
}

if (!pkg.version) {
  console.error("package.json missing 'version' field");
  process.exit(1);
}

const newVersion = bump(pkg.version, bumpType);
pkg.version = newVersion;

try {
  fs.writeFileSync(pkgPath, `${JSON.stringify(pkg, null, 2) }\n`, "utf8");
} catch (e) {
  console.error("Failed to write package.json:", e.message);
  process.exit(1);
}

const contents = `${banner}export const APP_VERSION = "${newVersion}";\n`;

try {
  fs.writeFileSync(outPath, contents, "utf8");
} catch (e) {
  console.error("Failed to write src/version.ts:", e.message);
  process.exit(1);
}

console.log(`Version bumped to: ${newVersion} (${bumpType})`);
